
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## This R script should be ran from the command line using
> ## R CMD BATCH data-raw/building-fup-red-data.R
> 
> ## Script used to create data examples from the full Smeltz 2023 
> ## fup red data (level-2) to use for function documentations
> ## and vignette. The data examples should be smaller subsets of three compounds.
> 
> ## load necessary package
> library(readxl)
Warning message:
package 'readxl' was built under R version 4.2.3 
> library(invitroTKstats)

Attaching package: 'invitroTKstats'

The following objects are masked _by_ '.GlobalEnv':

    fup_red_L0, fup_red_L1, fup_red_L2

> 
> ## Picked three compounds from the data that we know all samples are verified (with "Y").
> red.list <- c("DTXSID6062599","DTXSID5030030","DTXSID8031865")
> 
> ## Check all compounds have all samples verified with "Y".
> ## They are also from the same sheet in the original file. 
> ## Make them easier to work with later.
> unique(smeltz2023.red[smeltz2023.red$DTXSID %in% red.list, "Verified"])
[1] "Y"
> unique(smeltz2023.red[smeltz2023.red$DTXSID %in% red.list, "Level0.File"])
[1] "PFAS LC-MS RED Summary 20220709.xlsx"
> unique(smeltz2023.red[smeltz2023.red$DTXSID %in% red.list, "Level0.Sheet"])
[1] "RED1 Raw"
> 
> ## Prepare Level-0
> ## read in chem.ids
> chem.ids <- read_excel("~/invitrotkstats/invitroTKstats/data-raw/Smeltz-RED/PFAS LC-MS RED Summary 20220709.xlsx", sheet=1, skip=1)[1:29,1:2]
New names:
• `Fu A` -> `Fu A...30`
• `Fu B` -> `Fu B...31`
• `Fu C` -> `Fu C...32`
• `Fu A` -> `Fu A...36`
• `Fu B` -> `Fu B...37`
• `Fu C` -> `Fu C...38`
• `Avg` -> `Avg...52`
• `Std Dev` -> `Std Dev...53`
• `Avg` -> `Avg...63`
• `Std Dev` -> `Std Dev...64`
> chem.ids <- as.data.frame(chem.ids)
> chem.ids <- subset(chem.ids, !duplicated(chem.ids[,2]))
> ## In this table, the chemical names and their lab IDs are in the same column 
> ## Extract them into two separate columns
> chem.ids$Compound <- unlist(lapply(strsplit(chem.ids[,2]," \\("),function(x) x[[1]])) 
> chem.ids$Chem.Lab.ID <- gsub(")", "", unlist(lapply(strsplit(chem.ids[,2]," \\("),function(x) x[[2]])))
> 
> ## Read in level-0 file
> ## Prepare a data guide for merge_level0 
> this.file <- "PFAS LC-MS RED Summary 20220709.xlsx"
> 
> data.guide <- create_catalog(
+   file = rep(this.file, 3),
+   sheet = rep("RED1 Raw", 3),
+   skip.rows = c(278,550,822),
+   date = rep("022322",3),
+   compound = c("PFPeA", "PFBS", "PFOA"),
+   istd = c("M5PFPeA", "M3PFBS", "M8PFOA"),
+   sample = rep("Name",3),
+   type = rep("Type", 3),
+   peak = rep("Area", 3),
+   istd.peak = rep("IS Area", 3),
+   conc = rep("Std. Conc", 3),
+   analysis.param = rep("RT",3),
+   num.rows = rep(268, 3),
+   ## Need this sample text column to create new columns later
+   additional.info = list(SampleText.ColName = rep("Sample Text",3))
+ )
##################################
## Data Catalog Checks
##################################
All of the standard columns exist in the catalog. 
All standard columns are data complete.
All of the standard columns in the catalog are of the correct class.
Your data catalog is ready for merge_level0.
##################################> 
> ## Pull in level-0 data
> ## In the merge_level0 function, need to specify the path to the level-0 Excel file 
> ## with the argument INPUT.DIR. 
> ## The Excel file is not tracked with the package. When re-creating the data,
> ## retrieve the file from the 'invitrotkstats' repository under directory: "working/SmeltzPFAS"
> ## Make necessary adjustments if needed. 
> fup_red_L0 <- merge_level0(level0.catalog  = data.guide,
+              num.rows.col="Number.Data.Rows",
+              istd.col="ISTD.Name",
+              type.colname.col="Type.ColName",
+              additional.colnames = "Sample Text", "nM",
+              additional.colname.cols = "SampleText.ColName",
+              chem.ids = chem.ids,
+              output.res = FALSE,
+              catalog.out = FALSE,
+              INPUT.DIR = "~/invitrotkstats/invitroTKstats/data-raw/Smeltz-RED/")
New names:
• `` -> `...1`
PFAS LC-MS RED Summary 20220709.xlsx, RED1 Raw, PFPeA
New names:
• `` -> `...1`
PFAS LC-MS RED Summary 20220709.xlsx, RED1 Raw, PFBS
New names:
• `` -> `...1`
PFAS LC-MS RED Summary 20220709.xlsx, RED1 Raw, PFOA
> 
> ## There are some additional columns needed for fup_red_L0 to go to level-1.
> ## But these columns do not exist in the original data file and  
> ## currently cannot be handled/added by additional utility functions. 
> ## Need to manually add them in. 
> 
> ## Set reasonable precision for numeric columns
> for (this.col in c("Peak.Area", "Compound.Conc", "ISTD.Peak.Area"))
+   fup_red_L0[,this.col] <- signif(as.numeric(fup_red_L0[,this.col]),6)
> 
> ## Create the Sample Type column, use the package annotations
> fup_red_L0 <- subset(fup_red_L0,!is.na(fup_red_L0[,"Sample Text"]))
> fup_red_L0[regexpr("CC",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "CC"
> fup_red_L0[regexpr("-Pl-",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "Plasma"
> fup_red_L0[regexpr("-S-",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "PBS"
> fup_red_L0[regexpr("-EC1-",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "EC1"                   
> fup_red_L0[regexpr("-EC2-",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "EC2"
> fup_red_L0[regexpr("/T1",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "T0"
> fup_red_L0[regexpr("/T5",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "Stability"
> fup_red_L0[regexpr("Crash Blank",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "NoPlasma.Blank"
> fup_red_L0[regexpr("Matrix Blank",fup_red_L0[,"Sample Text"])!=-1,
+            "Sample.Type"] <- "Plasma.Blank"
> 
> ## Create the Replicate column
> fup_red_L0[regexpr("-A",fup_red_L0[,"Sample Text"])!=-1,
+            "Replicate"] <- "A"
> fup_red_L0[regexpr("-B",fup_red_L0[,"Sample Text"])!=-1,
+            "Replicate"] <- "B"
> fup_red_L0[regexpr("-C",fup_red_L0[,"Sample Text"])!=-1,
+            "Replicate"] <- "C"
> 
> ## Create the Time column
> fup_red_L0[regexpr("/T1",fup_red_L0[,"Sample Text"])!=-1,
+            "Time"] <- 1
> fup_red_L0[regexpr("/T5",fup_red_L0[,"Sample Text"])!=-1,
+            "Time"] <- 5
> 
> ## Set Area of blank samples to 0
> fup_red_L0[fup_red_L0[,"Sample.Type"]%in%"NoPlasma.Blank","Peak.Area"] <- 0
> fup_red_L0[fup_red_L0[,"Sample.Type"]%in%"NoPlasma.Blank","ISTD.Peak.Area"] <- 1
> 
> # Remove samples with missing peak areas for analyte and internal standard
> fup_red_L0 <- subset(fup_red_L0, !is.na(Peak.Area) & 
+                        !is.na(fup_red_L0[,"ISTD.Peak.Area"]))
> 
> # Create the dilution factors column
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "CC" %in% x),"Dilution.Factor"] <- 1
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "PBS" %in% x),"Dilution.Factor"] <- 2
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "EC1" %in% x),"Dilution.Factor"] <- 10
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "EC2" %in% x),"Dilution.Factor"] <- 10
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "Plasma" %in% x),"Dilution.Factor"] <- 20
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "T0" %in% x),"Dilution.Factor"] <- 10
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "Stability" %in% x),"Dilution.Factor"] <- 10
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "Plasma.Blank" %in% x),"Dilution.Factor"] <- 1
> fup_red_L0[sapply(fup_red_L0[,"Sample.Type"],function(x) "NoPlasma.Blank" %in% x),"Dilution.Factor"] <- 1
> 
> ## Convert the unit to what the package uses: uM
> fup_red_L0[,"Compound.Conc"] <- as.numeric(fup_red_L0[,"Compound.Conc"])/100
> 
> ## Prepare level-1 data
> fup_red_L1 <- format_fup_red(data.in = fup_red_L0,
+                              sample.col ="Sample",
+                              date.col="Date",
+                              compound.col="Compound",
+                              lab.compound.col="Compound",
+                              type.col="Sample.Type",
+                              dilution.col="Dilution.Factor",
+                              biological.replicates.col ="Replicate",
+                              cal=1,
+                              area.col = "Peak.Area",
+                              istd.conc = 10/1000,
+                              istd.col= "ISTD.Peak.Area",
+                              test.conc.col = "Compound.Conc", 
+                              test.nominal.conc = 10,
+                              plasma.percent = 100,
+                              time.col = "Time",
+                              analysis.method = "LCMS",
+                              analysis.instrument = "Waters ACQUITY I-Class UHPLC - Xevo TQ-S uTQMS",
+                              analysis.parameters = "RT",
+                              note.col=NULL,
+                              output.res = FALSE
+ )
492 observations of 3 chemicals based on 3 separate measurements (calibrations).
Warning message:
In format_fup_red(data.in = fup_red_L0, sample.col = "Sample", date.col = "Date",  :
  Data with inappropriate sample types were removed.
> 
> ## Prepare Level-2 data
> ## All samples are verified 
> fup_red_L2 <- fup_red_L1
> fup_red_L2$Verified <- "Y"
> 
> ## Compare with smeltz2023.red to make sure the subset of three compounds 
> ## matches what's in the full data
> red.sub <- smeltz2023.red[smeltz2023.red$DTXSID %in% red.list, ]
> 
> ## Compare some key parameters 
> nrow(red.sub) == nrow(fup_red_L1)
[1] TRUE
> all(unique(red.sub$Compound.Name) %in% unique(fup_red_L1$Compound.Name))
[1] TRUE
> 
> summary(red.sub$Response)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000000 0.0001865 0.0003974 0.0178948 0.0021340 0.5649000 
> summary(fup_red_L1$Response)
     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. 
0.0000000 0.0001865 0.0003974 0.0178948 0.0021340 0.5649000 
> 
> table(red.sub$Sample.Type)

            CC NoPlasma.Blank            PBS         Plasma   Plasma.Blank 
           192              6             72             72              6 
     Stability             T0 
            72             72 
> table(fup_red_L1$Sample.Type)

            CC NoPlasma.Blank            PBS         Plasma   Plasma.Blank 
           192              6             72             72              6 
     Stability             T0 
            72             72 
> 
> ## Save level-0 and level-1 data to use for function demo/example documentation 
> save(fup_red_L0, fup_red_L1, fup_red_L2, file = "~/invitrotkstats/invitroTKstats/data/Fup-RED-example.RData")
> 
> ## Include session info
> utils::sessionInfo()
R version 4.2.2 (2022-10-31 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 22621)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.utf8 
[2] LC_CTYPE=English_United States.utf8   
[3] LC_MONETARY=English_United States.utf8
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.utf8    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] invitroTKstats_0.0.9 readxl_1.4.3        

loaded via a namespace (and not attached):
 [1] rstudioapi_0.15.0 magrittr_2.0.3    tidyselect_1.2.0  munsell_0.5.0    
 [5] colorspace_2.1-0  lattice_0.20-45   R6_2.5.1          rlang_1.1.1      
 [9] fansi_1.0.4       dplyr_1.1.2       tools_4.2.2       rbibutils_2.2.13 
[13] parallel_4.2.2    grid_4.2.2        gtable_0.3.4      utf8_1.2.3       
[17] cli_3.6.1         coda_0.19-4       tibble_3.2.1      lifecycle_1.0.3  
[21] ggplot2_3.4.2     vctrs_0.6.3       Rdpack_2.5        glue_1.6.2       
[25] compiler_4.2.2    pillar_1.9.0      cellranger_1.1.0  runjags_2.2.2-1.1
[29] generics_0.1.3    scales_1.2.1      stats4_4.2.2      pkgconfig_2.0.3  
> 
> proc.time()
   user  system elapsed 
   2.06    2.84    7.00 
