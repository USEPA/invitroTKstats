
R version 4.2.2 (2022-10-31 ucrt) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ## This R script should be ran from the command line using
> ## R CMD BATCH data-raw/building-Clint-data.R
> 
> ## Script used to create data examples for Clint data to use for function documentations 
> ## and vignette. The data examples are small subsets of three compounds.
> 
> ## Load necessary package
> library(invitroTKstats)

Attaching package: 'invitroTKstats'

The following object is masked _by_ '.GlobalEnv':

    fup_red_L2

> library(readxl)
Warning message:
package 'readxl' was built under R version 4.2.3 
> 
> ## smeltz2023.clint only has data for seven compounds.
> ## Unfortunately there's only one compound which has all samples verified with a "Y",
> ## other compounds all have some samples excluded from the analysis. 
> ## Need to go through couple verification steps from level-1 to level-2.
> 
> ## Choose three compounds for the subset
> clint.list <- c("DTXSID1021116", "DTXSID6023525", "DTXSID80380256")
> 
> ## Prepare Level-0
> ## The Excel file containing the level-0 samples is not tracked with the package. 
> ## When re-creating the data, retrieve the file from the 'invitrotkstats' repository 
> ## under directory: "working/SmeltzPFAS" and save it to the path: "data-raw/Smeltz-Clint".
> ## Create the folder if need to. 
> 
> ## Read in chem.ids
> chem.ids <- read_excel("~/invitrotkstats/invitroTKstats/data-raw/Smeltz-Clint/Hep12 Data for Uncertainty Feb2022.xlsx", 
+                        sheet=1)
> chem.ids <- as.data.frame(chem.ids)
> ## In this table, the chemical names and their lab IDs are in the same column 
> ## Extract them into two separate columns
> chem.ids$Compound <- unlist(lapply(strsplit(chem.ids[,2]," \\("),function(x) x[[1]])) 
> chem.ids$Chem.Lab.ID <- gsub(")", "", unlist(lapply(strsplit(chem.ids[,2]," \\("),function(x) if (length(x)!= 1) x[[2]] else tolower(x[[1]]))))
> 
> ## Read in level-0 file
> ## Prepare a data guide for merge_level0 
> this.file <- "Hep12 Data for Uncertainty Feb2022.xlsx"
> 
> data.guide <- create_catalog(
+   file = rep(this.file, 3),
+   sheet = c("Ref Chem Data","Ref Chem Data", "PFAS Data"),
+   skip.rows = c(6, 137, 6),
+   date = rep("2022-01-28", 3),
+   compound = c("phenacetin", "propranolol", "TFMFPA"),
+   istd = c("propranolol-d7", "propranolol-d7", "M5PFPeA"),
+   sample = rep("Name",3),
+   type = rep("Type", 3),
+   peak = rep("Area", 3),
+   istd.peak = rep("IS Area", 3),
+   conc = rep("nM", 3),
+   analysis.param = rep("RT",3),
+   num.rows = c(127, 127, 165),
+   ## Need this sample text column to create new columns later
+   additional.info = list(SampleText.ColName = rep("Sample Text",3))
+ )
##################################
## Data Catalog Checks
##################################
All of the standard columns exist in the catalog. 
All standard columns are data complete.
All of the standard columns in the catalog are of the correct class.
Your data catalog is ready for merge_level0.
##################################> 
> ## Pull in level-0 data
> ## In the merge_level0 function, specify the path to the level-0 Excel file 
> ## with the argument INPUT.DIR. Make necessary adjustments if needed.
> clint_L0 <- merge_level0(level0.catalog  = data.guide,
+                            num.rows.col="Number.Data.Rows",
+                            istd.col="ISTD.Name",
+                            type.colname.col="Type.ColName",
+                            additional.colnames = "Sample Text", 
+                            additional.colname.cols = "SampleText.ColName",
+                            chem.ids = chem.ids,
+                            output.res = FALSE,
+                            catalog.out = FALSE,
+                            INPUT.DIR = "~/invitrotkstats/invitroTKstats/data-raw/Smeltz-Clint")
New names:
• `` -> `...1`
Hep12 Data for Uncertainty Feb2022.xlsx, Ref Chem Data, phenacetin
New names:
• `` -> `...1`
Hep12 Data for Uncertainty Feb2022.xlsx, Ref Chem Data, propranolol
New names:
• `` -> `...1`
Hep12 Data for Uncertainty Feb2022.xlsx, PFAS Data, TFMFPA
> 
> ## There are some additional columns needed for clint_L0 to go to level-1.
> ## But these columns do not exist in the original data file and  
> ## currently cannot be handled/added by additional utility functions. 
> ## Need to manually add them in. Following the steps in smeltz-hep-inactive.R,
> ## this script can also be found under "working/SmeltzPFAS".
> 
> ## Remove rows with blank sample text
> clint_L0 <- subset(clint_L0,!is.na(clint_L0[,"Sample Text"]))
> 
> ## Create sample type column
> ## Use the package annotation of type:
> clint_L0 <- subset(clint_L0,!is.na(Type))
> clint_L0[clint_L0$Type == "Analyte", "Type"] <- "Cvst"
> clint_L0[clint_L0$Type == "Standard", "Type"] <- "CC"
> clint_L0[regexpr("inactive",tolower(clint_L0[,"Sample Text"]))!=-1,
+          "Type"] <- "Inactive"
> 
> ## Create time column
> clint_L0[,"Time"] <- NA
> clint_L0[regexpr("t240",tolower(clint_L0[,"Sample Text"]))!=-1,"Time"] <- 240/60
> clint_L0[regexpr("t120",tolower(clint_L0[,"Sample Text"]))!=-1,"Time"] <- 120/60
> clint_L0[regexpr("t60",tolower(clint_L0[,"Sample Text"]))!=-1,"Time"] <- 60/60
> clint_L0[regexpr("t30",tolower(clint_L0[,"Sample Text"]))!=-1,"Time"] <- 30/60
> clint_L0[regexpr("t15",tolower(clint_L0[,"Sample Text"]))!=-1,"Time"] <- 15/60
> clint_L0[regexpr("t0",tolower(clint_L0[,"Sample Text"]))!=-1,"Time"] <- 0/60
> 
> ## Remove media-only samples
> clint_L0[regexpr("wem",tolower(clint_L0[,"Sample Text"]))!=-1,"Time"] <- NA
> clint_L0 <- subset(clint_L0,!is.na(Time) | Type != "Cvst")
> 
> ## Create a column for the dilution factors:
> ## Information found in lines 100 to 115 in smeltz-hep-inactive.R
> ## The dilution factor is indeed different across different sample types.
> ## -	The calibration curves (all, regardless of analyte) are diluted 240x
> ## -	The ref cmpds (may have label “HLB”) and PFAS labeled as “WAX1” are diluted 480x
> ## -	PFAS marked as WAX2 are diluted 720x
> 
> clint_L0$Dilution.Factor <- 240
> clint_L0[regexpr("hlb",tolower(clint_L0[,"Sample Text"]))!=-1,
+            "Dilution.Factor"] <- 480
> clint_L0[regexpr("wax1",tolower(clint_L0[,"Sample Text"]))!=-1,
+            "Dilution.Factor"] <- 480
> clint_L0[regexpr("wax2",tolower(clint_L0[,"Sample Text"]))!=-1,
+            "Dilution.Factor"] <- 720
> clint_L0[regexpr("cc",tolower(clint_L0[,"Sample Text"]))!=-1,
+            "Dilution.Factor"] <- 240
> 
> ## Make sure concentration and area columns are numeric
> clint_L0$Peak.Area <- as.numeric(clint_L0$Peak.Area)
> clint_L0[,"ISTD.Peak.Area"] <- as.numeric(clint_L0[,"ISTD.Peak.Area"])
> clint_L0[,"Compound.Conc"] <- as.numeric(clint_L0[,"Compound.Conc"])
> clint_L0 <- subset(clint_L0, !is.na(Peak.Area) & 
+                        !is.na(clint_L0[,"ISTD.Peak.Area"]))
> 
> ## The 'Compound.Conc' column maps to the 'nM' column in the original Excel file
> ## The unit is in nM, need to convert to uM which is what the package uses
> clint_L0[,"Compound.Conc"] <- as.numeric(clint_L0[,"Compound.Conc"])/1000
> ## Only set a standard/expected conc for calibration curve points
> clint_L0[clint_L0[,"Type"]!="CC","Compound.Conc"] <- NA
> ## Concentrations calculated including dilution
> clint_L0[,"Compound.Conc"] <- clint_L0[,"Compound.Conc"]*clint_L0$Dilution.Factor
> 
> 
> ## Prepare Level-1 
> clint_L1 <- format_clint(data.in = clint_L0,
+                        sample.col ="Sample",
+                        date.col="Date",
+                        compound.col="Compound",
+                        lab.compound.col="Lab.Compound.ID",
+                        type.col="Type",
+                        dilution.col="Dilution.Factor",
+                        cal=1,
+                        istd.conc = 10/1000,
+                        istd.col= "ISTD.Peak.Area",
+                        area.col = "Peak.Area",
+                        density = 0.5,
+                        clint.assay.conc = 1,
+                        biological.replicates = 1,
+                        test.conc.col="Compound.Conc",
+                        time.col = "Time",
+                        analysis.method = "LCMS",
+                        analysis.instrument = "Unknown",
+                        analysis.parameters.col = "Analysis.Params",
+                        note="Sample Text",
+                        output.res = FALSE
+ )
229 observations of 3 chemicals based on 3 separate measurements (calibrations).
Warning message:
In format_clint(data.in = clint_L0, sample.col = "Sample", date.col = "Date",  :
  Data with inappropriate sample types were removed.
> 
> ## First assign "Y" to all samples
> clint_L2 <- sample_verification(data.in = clint_L1, assay = "Clint",output.res = FALSE)
> 
> ## If the mix recorded in column "Note" does not match what's recorded on the 
> ## summary table (chem.ids), exclude the sample due to wrong mix.
> for (this.id in clint.list)
+ {
+   this.mix <- chem.ids[chem.ids$DTXSID==this.id,"Mix"]
+   if (regexpr("WAX1",this.mix)!=-1)
+   {
+     clint_L2[clint_L2$DTXSID==this.id & 
+              (clint_L2$Sample.Type %in% c("Cvst", "Inactive")) &
+              regexpr("WAX2",clint_L2$Note)!=-1,"Verified"] <- "Wrong Mix"
+   } else if (regexpr("WAX2",this.mix)!=-1)
+   {
+     clint_L2[clint_L2$DTXSID==this.id & 
+              (clint_L2$Sample.Type %in% c("Cvst", "Inactive")) &
+              regexpr("WAX1",clint_L2$Note)!=-1,"Verified"] <- "Wrong Mix"
+   }
+ }
> ## Exclude calibration curve samples if the concentration is unknown.
> clint_L2[clint_L2$Sample.Type=="CC" & is.na(clint_L2$Test.Compound.Conc),"Verified"] <- 
+   "Unknown Conc."
> 
> ## Compare with the level-2 data that's already in the package 
> ## see if the subset matches what's in the full data.
> clint.sub <- smeltz2023.clint[smeltz2023.clint$DTXSID %in% clint.list, ]
> 
> ## Check the dimension
> ## The example data set is expected to have one more column because the original 
> ## data set does not have a replicate or a series column. With new update 
> ## to the level-1 format function (IVTKS-4) the data are required to have either
> ## a biological replicate column or a technical replicate column.
> dim(clint.sub)
[1] 229  24
> dim(clint_L2)
[1] 229  25
> 
> colnames(clint_L2)
 [1] "Lab.Sample.Name"       "Date"                  "Compound.Name"        
 [4] "DTXSID"                "Lab.Compound.Name"     "Sample.Type"          
 [7] "Dilution.Factor"       "Calibration"           "ISTD.Name"            
[10] "ISTD.Conc"             "ISTD.Area"             "Area"                 
[13] "Analysis.Method"       "Analysis.Instrument"   "Analysis.Parameters"  
[16] "Note"                  "Level0.File"           "Level0.Sheet"         
[19] "Time"                  "Test.Compound.Conc"    "Clint.Assay.Conc"     
[22] "Hep.Density"           "Biological.Replicates" "Response"             
[25] "Verified"             
> colnames(clint.sub)
 [1] "Lab.Sample.Name"     "Date"                "Compound.Name"      
 [4] "DTXSID"              "Lab.Compound.Name"   "Sample.Type"        
 [7] "Dilution.Factor"     "Calibration"         "ISTD.Name"          
[10] "ISTD.Conc"           "ISTD.Area"           "Hep.Density"        
[13] "Std.Conc"            "Clint.Assay.Conc"    "Time"               
[16] "Area"                "Analysis.Method"     "Analysis.Instrument"
[19] "Analysis.Parameters" "Note"                "Level0.File"        
[22] "Level0.Sheet"        "Response"            "Verified"           
> common.cols <- intersect(colnames(clint.sub),colnames(clint_L2))
> ## Check if the common columns have the same names
> colnames(clint.sub[,common.cols]) == colnames(clint_L2[,common.cols])
 [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
[16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> ## Check all the columns with the same name have matching values
> all(clint.sub[,common.cols] == clint_L2[,common.cols])
[1] FALSE
> for(i in common.cols){
+   test <- all(clint.sub[,i] == clint_L2[,i])
+   if(test == FALSE | is.na(test)){
+     print(i)
+   }
+ }
[1] "Date"
[1] "Compound.Name"
[1] "Lab.Compound.Name"
[1] "ISTD.Area"
[1] "Time"
[1] "Area"
[1] "Analysis.Parameters"
[1] "Level0.Sheet"
[1] "Response"
> 
> ## Address the discrepancies one by one
> 
> ## Discrepancies found in the Date column:
> ## The original (smeltz2023.clint) data set uses the sample acquired date
> ## from the Excel file and the date was converted into numbers when read in.
> ## I use the date in the lab sample names and enter them in a "yyyy-mm-dd" format.
> 
> ## Discrepancies found in the Compound.Name column:
> ## The original data set uses lab compound ID/abbreviations for compound name
> ## instead of the full name, which is what I did when I created the subsets.
> ## I will keep it as-is.
> 
> ## Discrepancies found in the Lab.Compound.Name column:
> ## One of the compound "propranolol" has the first letter capitalized in smeltz2023.clint.
> ## Convert to all lower case and check again:
> all(tolower(clint.sub[,"Lab.Compound.Name"]) == tolower(clint_L2[,"Lab.Compound.Name"]))
[1] TRUE
> 
> ## Discrepancies found in the Area and ISTD.Area columns:
> ## Area and ISTD.Area were rounded to 5 significant digits in format_clint (lines 442-443).
> ## Samples with areas larger than 10,000 got the decimals chopped off.
> ## Compare the columns in 5 significant digits: 
> clint.sub$Area <- signif(clint.sub[,"Area"], 5)
> all(clint.sub[,"Area"] == clint_L2[,"Area"])
[1] TRUE
> 
> clint.sub$ISTD.Area <- signif(clint.sub[,"ISTD.Area"], 5)
> all(clint.sub[,"ISTD.Area"] == clint_L2[,"ISTD.Area"])
[1] TRUE
> 
> ## Discrepancies found in the Time column:
> ## Time column contains missing values so the check with all() will return NA 
> ## Use other method to check for this column
> table(clint.sub[,"Time"] == clint_L2[,"Time"])

TRUE 
  78 
> 
> ## Discrepancies found in the Analysis.Parameters column:
> ## Analysis.Parameters is a numeric column in smeltz2023.clint while it is a character
> ## column in the example data.
> ## Convert Analysis.Parameters in clint_L2 and check again:
> clint_L2$Analysis.Parameters <- as.numeric(clint_L2$Analysis.Parameters)
> all(clint_L2$Analysis.Parameters == clint.sub$Analysis.Parameters)
[1] TRUE
> 
> ## Discrepancies found in the Level0.Sheet column:
> ## The script smeltz-hep-inactive.R created this column with a single value for all rows 
> ## (in line 137) while it in fact pulls data from two different sheets from the original 
> ## Excel workbook (line 9). I will keep my input since they are accurate.
> 
> ## Discrepancies found in the Response column:
> ## Differences in this column are most likely caused by rounding errors since 
> ## the same issue happened with area and istd.area, and responses are calculated from them.
> diffs <- clint.sub[,"Response"]- clint_L2[,"Response"]
> summary(diffs[!is.na(diffs)])
      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. 
-1.000e-06  0.000e+00  0.000e+00  7.769e-08  0.000e+00  1.000e-05 
> ## The maximum difference is 1.000e-05 and the minimum difference is -1.000e-06
> 
> ## Set to the same precision and check again
> clint.og.resp <- signif(as.numeric(clint.sub[,"Response"]),6)
> clint.ex.resp <- signif(as.numeric(clint_L2[,"Response"]),6)
> diffs <- clint.ex.resp - clint.og.resp
> ## Replace missing values with 0
> diffs[is.na(diffs)] <- 0
> ## The differences, if any, should be smaller than a reasonable tolerance. Here uses four decimal places.
> all(abs(diffs) <= 1e-4)
[1] TRUE
> 
> ## Compare the columns with different column names  
> colnames(clint_L2)[which(!(colnames(clint_L2) %in% common.cols))]
[1] "Test.Compound.Conc"    "Biological.Replicates"
> colnames(clint.sub)[which(!(colnames(clint.sub) %in% common.cols))]
[1] "Std.Conc"
> 
> ## Biological.Replicates is a new required column filled with 1.
> ## Compare the concentration columns:
> all(clint_L2[,"Test.Compound.Conc"] == clint.sub[,"Std.Conc"])
[1] FALSE
> 
> clint.ex.conc <- signif(as.numeric(clint_L2[,"Test.Compound.Conc"]),6)
> clint.og.conc <- signif(as.numeric(clint.sub[,"Std.Conc"]),6)
> diffs <- clint.ex.conc - clint.og.conc
> ## Replace missing values with 0
> diffs[is.na(diffs)] <- 0
> ## The differences, if any, should be smaller than a reasonable tolerance. Here uses four decimal places.
> all(abs(diffs) <= 1e-4)
[1] TRUE
> 
> ## All columns are checked and any differences are documented
> 
> ## Save level-0 to level-2 data to use for function demo/example documentation 
> save(clint_L0, clint_L1, clint_L2, file = "~/invitrotkstats/invitroTKstats/data/Clint-example.RData")
> 
> ## Include session info
> utils::sessionInfo()
R version 4.2.2 (2022-10-31 ucrt)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 22621)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.utf8 
[2] LC_CTYPE=English_United States.utf8   
[3] LC_MONETARY=English_United States.utf8
[4] LC_NUMERIC=C                          
[5] LC_TIME=English_United States.utf8    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] readxl_1.4.3         invitroTKstats_0.0.9

loaded via a namespace (and not attached):
 [1] rstudioapi_0.15.0 magrittr_2.0.3    tidyselect_1.2.0  munsell_0.5.0    
 [5] colorspace_2.1-0  lattice_0.20-45   R6_2.5.1          rlang_1.1.1      
 [9] fansi_1.0.4       dplyr_1.1.2       tools_4.2.2       rbibutils_2.2.13 
[13] parallel_4.2.2    grid_4.2.2        gtable_0.3.4      utf8_1.2.3       
[17] cli_3.6.1         coda_0.19-4       tibble_3.2.1      lifecycle_1.0.3  
[21] ggplot2_3.4.2     vctrs_0.6.3       Rdpack_2.5        glue_1.6.2       
[25] cellranger_1.1.0  compiler_4.2.2    pillar_1.9.0      runjags_2.2.2-1.1
[29] generics_0.1.3    scales_1.2.1      stats4_4.2.2      pkgconfig_2.0.3  
> 
> 
> proc.time()
   user  system elapsed 
   1.18    1.26    7.12 
