#------------------------------------------------------------------------------
# Name:        clearance-model.jags
# Description: A JAGS model for estimating intrinsic hepatic clearance from an
#              HTTK assay
#
# Author:      John Wambaugh
#------------------------------------------------------------------------------
                                                   
model {
# Measurement Model:
  log.const.analytic.sd ~ dnorm(-2,0.1)
  const.analytic.sd <- 10^log.const.analytic.sd
  log.hetero.analytic.slope.factor ~ dnorm(1,.1)
  hetero.analytic.slope.factor <- 10^log.hetero.analytic.slope.factor
  hetero.analytic.slope <- hetero.analytic.slope.factor*const.analytic.sd
  for (i in 1:2)
  {
# Number of pixels in the background signal:
    background[i] ~ dunif(0,1000)         
    log.calibration[j] ~ dnorm(0,.1)
# calibration*concentration = number of pixles:
    calibration[i] <- 10^log.calibration[i]
# Concentrations below this value are not detectable:
    log.C.thresh[j] ~ dnorm(log(C.frank/2),0.25)T(log(C.frank/1000),log(10*C.frank))
    C.thresh[j] <- exp(log.C.thresh[j])
    Blank.pred[i] <- background[i]  
    Blank.prec[i] <- (const.analytic.sd+hetero.analytic.slope*(Blank.pred[i]))^(-2)
  }

# Likelihood for the blank observations:
  for (i in 1:Num.blank.obs) {
    Blank.obs[i] ~ dnorm(Blank.pred[Blank.conc[i]],Blank.prec[Blank.conc[i]])
  }

# Clearance model:

# Specify the nominal conc:
  C0[1] <- 1
  C0[2] <- 10

# Decreases indicates whether or not the concentration decreases (1 is yes, 0 is no):
  decreases ~ dbern(0.5) 
# Slope is the clearance rate at the lower concentration (fastest slope we can 
#identify is assumed to be 99.4% gone in the first 15 minutes):
  rate ~ dunif(0,-5/15)
  slope[1] <- decreases*rate
# Saturates is whether or not the clearance rate decreases (1 is yes, 0 is no):
  saturates ~ dbern(0.5) 
# Saturation is how much the clearance rate decreases at the higher conc:
  saturation ~ dunif(0,1)
  slope[2] <- slope[1]*(1 - saturates*saturation)

# The observations are normally distributed (heteroskedastic error):
  for (i in 1:Num.obs)
  {
    C[i] <- C0[obs.conc[i]]*exp(-slope[obs.conc[i]]*obs.time[i])
    obs.pred[i] <- calibration[obs.conc[i]]*(C[i]-C.thresh[obs.conc[i]])*step(C[i]-C.thresh[obs.conc[i]])+ background[obs.conc[i]]    
    obs.prec[i] <- (const.analytic.sd+hetero.analytic.slope*obs.pred[i])^(-2)
    
    obs[i] ~ dnorm(obs.pred[i],obs.prec[i])
  }
}